{"version":3,"sources":["components/Icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winmsg","setWinmsg","changeItem","itemNum","toast","type","Container","position","Row","Col","md","Button","onClick","map","item","index","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2cf4c59a.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTimes, FaPen, FaRegCircle } from 'react-icons/fa';\n\n\nconst Icon = ({name})=>{\n\n\n    switch (name) {\n        case \"Circle\":\n            return(\n                <FaRegCircle className=\"icon text-primary\" ></FaRegCircle>\n            )\n        case \"Cross\":\n            return(\n                <FaTimes className=\"icon text-danger\"  ></FaTimes>\n            )  \n    \n        default:\n            return(\n                <FaPen className=\"icon\"  ></FaPen>\n            )  \n    }\n}\n\nexport default Icon;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, Row, Col, Container,Card, CardBody } from 'reactstrap';\nimport {ToastContainer, toast} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport Icon from \"./components/Icon\"\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nfunction App() {\n  \n  const[isCross, setIsCross] = useState(false)\n  const[winmsg, setWinmsg] = useState(\"\")\n\n  const reload = ()=>{\n    setIsCross(false)\n    setWinmsg(\"\")\n    itemArray.fill(\"empty\",0,9)\n  };\n\n  const checkwin = ()=>{\n    if(itemArray[0]===itemArray[1] && itemArray[1]===itemArray[2] && itemArray[0] !== \"empty\"){\n      setWinmsg(`${itemArray[0]} Won the Game!`)\n    }\n    else if(itemArray[3]===itemArray[4] && itemArray[4]===itemArray[5] && itemArray[3] !== \"empty\"){\n      setWinmsg(`${itemArray[3]} Won the Game!`)\n    }\n    else if(itemArray[6]===itemArray[7] && itemArray[7]===itemArray[8] && itemArray[6] !== \"empty\"){\n      setWinmsg(`${itemArray[6]} Won the Game!`)\n    }\n    else if(itemArray[0]===itemArray[3] && itemArray[3]===itemArray[6] && itemArray[0] !== \"empty\"){\n      setWinmsg(`${itemArray[0]} Won the Game!`)\n    }\n    else if(itemArray[1]===itemArray[4] && itemArray[4]===itemArray[7] && itemArray[1] !== \"empty\"){\n      setWinmsg(`${itemArray[1]} Won the Game!`)\n    }\n    else if(itemArray[2]===itemArray[5] && itemArray[5]===itemArray[8] && itemArray[2] !== \"empty\"){\n      setWinmsg(`${itemArray[2]} Won the Game!`)\n    }\n    else if(itemArray[0]===itemArray[4] && itemArray[4]===itemArray[8] && itemArray[0] !== \"empty\"){\n      setWinmsg(`${itemArray[0]} Won the Game!`)\n    }\n    else if(itemArray[2]===itemArray[4] && itemArray[4]===itemArray[6] && itemArray[2] !== \"empty\"){\n      setWinmsg(`${itemArray[2]} Won the Game!`)\n    }\n    else if(itemArray[0]!==\"empty\" && itemArray[1]!==\"empty\" && itemArray[2]!==\"empty\" && itemArray[3]!==\"empty\" && itemArray[4]!==\"empty\" && itemArray[5]!==\"empty\" && itemArray[6]!==\"empty\" && itemArray[7]!==\"empty\" && itemArray[8]!==\"empty\"){\n      setWinmsg(\"It's a TIE\")\n    }\n    \n  };\n\n  const changeItem =(itemNum)=>{\n    if (winmsg){\n      return toast(winmsg, {type:\"success\"})\n    }\n    if (itemArray[itemNum]===\"empty\"){\n      itemArray[itemNum] = isCross? \"Circle\" :\"Cross\";\n      setIsCross(!isCross)\n    }\n    else{\n      return toast(\"Invalid Selection\", {type:\"error\"})\n    }\n\n    checkwin();\n\n  };\n\n  return (\n      <Container >\n        <ToastContainer position=\"bottom-center\"></ToastContainer>\n        <Row>\n          <Col md={6} className=\"offset-md-3\">\n            {\n              winmsg? (\n                <div className=\"my-5 text-center\">\n                  <h1 className=\"text-center text-light\">{winmsg}</h1>\n                  <Button onClick={reload}>Reload</Button>\n                </div>\n              ) : (\n                <div className=\"my-5\">\n                  <h1 className=\"text-center text-light\">{\n                    isCross? \"Circle's\" : \"Cross's\"\n                    } turn</h1>\n                </div>\n              )\n            }\n            <div className=\"grid\">\n              {itemArray.map((item,index)=>(\n                <Card >\n                  <CardBody className=\"box\" onClick={()=> changeItem(index)}  >\n                    <Icon name={item} ></Icon>\n                  </CardBody>\n                </Card>\n              ))}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}